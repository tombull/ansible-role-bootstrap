---
# vars file for bootstrap
bootstrap_connect: {}
bootstrap_remote_user: '{{ (ansible_user | default(omit, true)) if bootstrap_connect is succeeded else bootstrap_user }}'

# A string for each distribution and version of packages to install.
# Because this is a bootstrap role, there are no facts. The file
# `tasks/register.yml` discovers what distribution and version ansible
# is running against.
_bootstrap_packages:
  alpine: python3 sudo
  arch: python3 sudo
  centos: python3 sudo
  gentoo: python sudo gentoolkit
  fedora: python3 sudo
  debian-8: python sudo gnupg
  debian-9: python sudo gnupg
  debian: python3 sudo gnupg python3-apt
  kali: python3 sudo gnupg
  opensuse: python python-xml sudo
  rhel: python3 sudo
  rhel-7: python sudo
  ubuntu: python3 sudo gnupg

# Map the right set of package based on values found in `tasks/register.yml`.
bootstrap_packages: "{{ _bootstrap_packages[bootstrap_distribution ~ '-' ~ bootstrap_distribution_major_version] | default(_bootstrap_packages[bootstrap_distribution] ) }}"

# Map the right set of packages, based on gathered facts.
bootstrap_facts_packages: "{{ _bootstrap_packages[ansible_distribution ~ '-' ~ ansible_distribution_major_version] | default(_bootstrap_packages[ansible_distribution]) }}"

# Does the distribution have a package manager?
bootstrap_has_package_manager: "{{ bootstrap_distribution != 'coreos' }}"

# Save this hideously long command here.
bootstrap_emerge_command: equery l {{ bootstrap_packages }} || (emaint -a sync ; emerge -qkv {{ bootstrap_packages }} ; echo "changed")
